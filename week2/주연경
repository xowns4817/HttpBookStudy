1) HTTP 메시지가 어떻게 흘러가는가
* HTTP 메시지

- HTTP 애플리케이션 간에 주고받은 데이터의 블록들

- 메시지의 내용과 의미를 설명하는 텍스트 메타 정보로 시작, 그다음에 선택적으로 데이터가 올 수 있다.

- 클라이언트 ~ 프락시 ~ 서버 사이를 흐른다.



* 메시지 방향

① 트랜잭션 관점

- 인바운드 : 메시지가 원 서버로 향하는 것

- 아웃바운드 : 모든 처리가 끝난 뒤에 메시지가 클라이언트로 돌아오는 것

② (발송자/수신자 관점) 메시지 방향

- 업스트림

- 다운스트림 → 요청이냐 응답이냐에 관계없이 모든 메시지는 다운스트림으로 흐른다.



2) HTTP 메시지의 세 부분(시작줄, 헤더, 개체 본문)
* 메시지 구성


① 시작줄

- 이것이 어떤 메시지인지 서술



② 헤더 블록

- 속성

- 시작줄과 헤더는 줄 단위로 분리된 아스키 문자열이다. 각 줄은 캐리지 리턴(ASCII 13)과 개행 문자(ASCII 10)으로 구성된 두 글자의 줄바꿈 문자열로 끝난다. 이 줄바꿈 문자열은 'CRLF'라고 쓴다. (오래되거나 잘못 만들어진 HTTP 애플리케이션들 중에서는 캐리지 리턴과 개행 문자 모두를 항상 전송하지는 않는 것들도 있으므로, 그냥 개행 문자도 받아들일 수 있어야 한다.)



③ 본문

- 데이터

- 텍스트나 이진 데이터를 포함할 수도 있고, 아예 없을 수도 있다.



3) 요청과 응답 메시지의 차이
- 모든 HTTP 메시지는 요청 메시지나 응답 메시지로 분류된다.



* 요청 메시지

- 웹 서버에 어떤 동작을 요구한다.

<메서드> <요청URL> <버전>
<헤더>

<엔터티 본문>
* 응답 메시지

- 요청의 결과를 클라이언트에게 돌려준다.

<버전> <상태 코드> <사유 구절>
<헤더>

<엔터티 본문>


① 메서드

- 클라이언트 측에서 서버가 리소스에 대해 수행해주길 바라는 동작



② 요청 URL

- 요청 대상이 되는 리소스를 지칭하는 완전한 URL 혹은 URL의 경로 구성요소

- URL에서 호스트/포트가 생략된 경우 서버는 자신을 가리키는 것으로 간주



③ 버전

- HTTP/<메이저>.<마이너>



④ 상태 코드

- 요청 중에 무엇이 일어났는지 설명하는 세 자리 숫자

- 각 코드의 첫 번째 자릿수는 상태의 일반적인 분류를 나타낸다.



⑤ 사유 구절(reason-phrase)

- 숫자로 된 상태 코드의 의미를 사람이 이해할 수 있게 설명해주는 짧은 문구

- 상태 코드 이후부터 줄바꿈 문자열까지

- 오로지 사람에게 읽히기 위한 목적으로만 존재하는 것



⑥ 헤더들

- 이름, 콜론, 선택적인 공백, 값, CRLF가 순서대로 나타나는 0개 이상의 헤더들

- 이 헤더의 목록은 빈 줄(CRLF)로 끝나 헤더 목록의 끝과 엔터티 본문의 시작을 표시한다.

- HTTP/1.1과 같은 몇몇 버전의 HTTP는 요청이나 응답에 어떤 특정 헤더가 포함되어야만 유효한 것으로 간주한다.



⑦ 엔터티 본문

- 임의의 데이터 블록을 포함한다.

- 모든 메시지가 엔터티 본문을 갖는 것은 아니므로, 때때로 메시지는 그냥 CRLF로 끝나게 된다.

** 헤더나 엔터티 본문이 없더라도 HTTP 헤더의 집합은 항상 빈 줄(CRLF)로 끝나야 함에 주의하라. 그러나 역사적으로 많은 클라이언트와 서버가 엔터티 본문이 없는 경우에 실수로 마지막 CRLF를 빠뜨린다. 이처럼 널리 쓰이지만 규칙을 잘 지키지 않는 구현체와의 호환을 위해, 클라이언트와 서버는 마지막 CRLF 없이 끝나는 메시지도 받아들일 수 있어야 한다.



* 시작줄

① 요청줄 : 요청 메시지의 시작줄

- 무엇을 해야 하는지 말해준다.

- 요청 메시지는 서버에게 리소스에 대해 무언가를 해달라고 부탁한다.

- 서버에서 어떤 동작이 일어나야 하는지 설명해주는 메서드와 그 동작에 대한 대상을 지칭하는 요청 URL이 들어있다.

- 클라이언트가 어떤 HTTP 버전으로 말하고 있는지 서버에게 알려주는 HTTP 버전도 포함한다.

- 이 모든 필드는 공백으로 구분된다.



② 응답줄 : 응답 메시지의 시작줄

- 무슨 일이 일어났는지 말해준다.

- 수행 결과에 대한 상태 정보와 결과 데이터를 클라이언트에게 돌려준다.

- 응답 메시지에서 쓰인 HTTP의 버전, 숫자로 된 상태 코드, 수행 상태에 대해 설명해주는 텍스트로 된 사유 구절이 들어 있다.

- 이 모든 필드는 공백으로 구분된다.



③ 메서드

- 서버에게 무엇을 해야 하는지 말해준다.

- HTTP 명세는 공통 요청 메서드의 집합을 정의한다.

메서드	설명	메시지 본문이 있는가?
GET	서버에서 어떤 문서를 가져온다.	X
HEAD	서버에서 어떤 문서에 대한 헤더만 가져온다.	X
POST	서버가 처리해야 할 데이터를 보낸다.	O
PUT	서버에 요청 메시지의 본문을 저장한다.	O
TRACE	메시지가 프락시를 거쳐 서버에 도달하는 과정을 추적한다.	X
OPTIONS	서버가 어떤 메서드를 수행할 수 있는지 확인한다.	X
DELETE	서버에서 문서를 제거한다.	X


④ 상태 코드

- 클라이언트에게 무엇이 일어났는지 말해준다. 서버는 요청한 리소스가 발견되지 않았거나, 그 리소스에 접근할 권한이 없거나, 어쩌면 그 리소스가 다른 곳으로 옮겨졌다고 알려올 수도 있다.

전체 범위	정의된 범위	분류
100-199	100-101	정보
200-299	200-206	성공
300-399	300-305	리다이렉션 (리소스 이동)
400-499	400-415	클라이언트 에러 (잘못된 요청)
500-599	500-505	서버 에러 (서버에서 무언가 실패)


⑤ 사유 구절

- 상태 코드에 대한 글로 된 설명

- 상태 코드와 일대일로 대응된다.

- 애플리케이션 개발자들이 그들의 사용자에게 요청 중에 무슨 일이 일어났는지 알려주기 위해 넘겨줄 수 있는, 상태 코드의 사람이 이해하기 쉬운 버전이다.

- HTTP 명세는 사유 구절이 어때야 한다는 어떤 엄격한 규칙도 제공하지 않는다.



⑥ 버전 번호

- HTTP/x.y : 이때 x, y는 각각 분리된 정수로, 각 숫자는 반드시 따로따로 비교해야 한다.

- 요청과 응답 메시지 양쪽 모두에 기술된다.

- HTTP 애플리케이션들이 자신이 따르는 프로토콜의 버전을 상대방에게 말해주기 위한 수단이 된다.

- 버전 번호는 HTTP로 대화하는 애플리케이션들에게 대화 상대의 능력과 메시지의 형식에 대한 단서를 제공해주기 위한 것이다.



* 헤더

- 시작줄 다음에는 0개, 1개 혹은 여러 개의 HTTP 헤더가 온다.

- 요청과 응답 메시지에 추가 정보를 더한 것으로, 기본적으로 이름/값 쌍의 목록이다.

- 애플리케이션은 자유롭게 자신만의 헤더를 만들어낼 수 있다.

- 이름, 쉼표, 공백(없어도 된다), 필드 값, CRLF가 순서대로 온다.

- 긴 헤더 줄은 그들을 여러 줄로 쪼개서 더 읽기 좋게 만들 수 있는데, 추가 줄 앞에는 최소 하나의 스페이스 혹은 탭 문자가 와야 한다.



* (선택적인) 엔터티 본문

- HTTP 메시지는 이미지, 비디오, HTML 문서, 소프트웨어 애플리케이션, 신용카드 트랜잭션, 전자우편 등 여러 종류의 디지털 데이터를 실어 나를 수 있다.



4) 요청 메시지가 지원하는 여러 기능(메서드)들
- 모든 서버가 모든 메서드를 구현하지는 않는다는 것에 주의하라.

- HTTP 버전 1.1과 호환되고자 한다면, 서버는 자신의 리소스에 대해 GET과 HEAD 메서드만을 구현하는 것으로 충분하다.

- 메서드는 대부분 제한적으로 사용되고, 이 제한은 일반적으로 서버 설정에 의해 정해진다.



* 안전한 메서드(Safe Method)

- HTTP는 안전한 메서드라 불리는 메서드의 집합을 정의한다. → GET, HEAD

- 이는 GET이나 HEAD 메서드를 사용하는 HTTP 요청의 결과로 서버에 어떤 작용도 없음을 의미한다.

- 목적 : 서버에 어떤 영향을 줄 수 있는 안전하지 않은 메서드가 사용될 때, 사용자들에게 그 사실을 알려주는 HTTP 애플리케이션을 만들 수 있도록 하는 것에 있다.



① GET

- 서버에게 리소스를 달라고 요청하기 위해 쓰인다.

- HTTP/1.1은 서버가 이 메서드를 구현할 것을 요구한다.



② HEAD

- 정확히 GET처럼 행동하지만, 서버는 응답으로 헤더만을 돌려준다. 엔터티 본문은 결코 반환되지 않는다.

- 리소스를 가져오지 않고도 그에 대해 무엇인가를 알아낼 수 있다.

- 응답의 상태 코드를 통해, 개체가 존재하는지 확인할 수 있다.

- 헤더를 확인하여 리소스가 변경되었는지 검사할 수 있다.

- 서버 개발자들은 반드시 반환되는 헤더가 GET으로 얻는 것과 정확히 일치함을 보장해야 한다.

- HTTP/1.1 준수를 위해서는 HEAD 메서드가 반드시 구현되어 있어야 한다.



③ PUT

- 서버에 문서를 쓴다.

- 서버가 요청의 본문을 가지고 요청 URL의 이름대로 새 문서를 만들거나, 이미 URL이 존재한다면 본문을 사용해서 교체하는 것이다.

- PUT은 콘텐츠를 변경할 수 있게 해주기 때문에, 많은 웹 서버가 PUT을 수행하기 전에 사용자에게 비밀번호를 입력해서 로그인을 하도록 요구할 것이다.



④ POST

- 서버에 입력 데이터를 전송하기 위해 설계되었다.

- 실제로 HTML 폼(form)을 지원하기 위해 흔히 사용된다. 채워진 폼에 담긴 데이터는 서버로 전송되며, 서버는 이를 모아서 필요로 하는 곳(ex. 데이터를 처리할 서버 게이트웨이 프로그램)에 보낸다.

** PUT vs POST

- POST : 서버에 데이터를 보내기 위해 사용

- PUT : 서버에 있는 리소스(예:파일)에 데이터를 입력하기 위해 사용



⑤ TRACE

- 주로 진단을 위해 사용된다.

- 클라이언트가 어떤 요청을 할 때, 그 요청은 방화벽, 프락시, 게이트웨이 등의 애플리케이션을 통과할 수 있는데

이들에게는 원래의 HTTP 요청을 수정할 수 있는 기회가 있다. 이때 클라이언트에게 자신의 요청이 서버에 도달했을 때 어떻게 보이게 되는지 알려준다.

- TRACE 요청은 목적지 서버에서 '루프백(loopback)' 진단을 시작한다. 요청 전송의 마지막 단계에 있는 서버는 자신이 받은 요청 메시지를 본문에 넣어 TRACE 응답을 되돌려준다. 클라이언트는 자신과 목적지 서버 사이에 있는 모든 HTTP 애플리케이션의 요청/응답 연쇄를 따라가면서 자신이 보낸 메시지가 망가졌거나 수정되었는지, 만약 그렇다면 어떻게 변경되었는지 확인할 수 있다.



⑥ OPTIONS

- 서버에게 특정 리소스에 대해 어떤 메서드가 지원되는지 물어볼 수 있다. (몇몇 서버는 특정 종류의 객체에 대해 특정 동작만을 지원한다.)

- 여러 리소스에 대해 실제로 접근하지 않고도 그것들을 어떻게 접근하는 것이 최선인지 확인할 수 있는 수단을 클라이언트 애플리케이션에게 제공한다.



⑦ DELETE

- 서버에게 요청 URL로 지정한 리소스를 삭제할 것을 요청한다.

- 그러나 클라이언트는 삭제가 수행되는 것을 보장하지 못한다. 왜냐하면 HTTP 명세는 서버가 클라이언트에게 알리지 않고 요청을 무시하는 것을 허용하기 때문이다.



⑧ 확장 메서드

- HTTP/1.1 명세에 정의되지 않은 메서드

- 개발자들에게 그들의 서버가 구현한 HTTP 서비스의 서버가 관리하는 리소스에 대한 능력을 확장하는 수단을 제공한다.

- 확장 메서드를 다룰 때는 "엄격하게 보내고 관대하게 받아들여라"라는 오랜 규칙에 따르는 것이 가장 좋다.



5) 응답 메시지가 반환하는 여러 상태 코드들 (주요)
- 상태 코드는 클라이언트에게 그들의 트랜잭션을 이해할 수 있는 쉬운 방법을 제공한다.



* 100-199 : 정보성 상태 코드

- HTTP/1.1에서 도입되었다.

상태 코드	사유 구절	의미
100	Continue	요청의 시작 부분 일부가 받아들여졌으며, 클라이언트는 나머지를 계속 이어서 보내야 함을 의미한다. 이것을 보낸 후, 서버는 반드시 요청을 받아 응답해야 한다.
① 100 Continue

- HTTP 클라이언트 애플리케이션이 서버에 엔터티 본문을 전송하기 전에 그 엔터티 본문을 서버가 받아들일 것인지 확인하려고 할 때, 그 확인 작업을 최적화하기 위한 의도로 도입된 것이다.



** 클라이언트와 100 Continue

- 클라이언트가 엔터티를 서버에게 보내려고 하고, 보내기 전에 100 Continue 응답을 기다리겠다면, 클라이언트는 값을 100-continue로 하는 Expect 요청 헤더를 보낼 필요가 있다. 만약 클라이언트가 엔터티를 보내지 않으려 한다면, 100-continue Expect 헤더를 보내지 않아야 한다.

- 클라이언트 애플리케이션은 100-continue를 서버가 다루거나 사용할 수 없는 큰 엔터티를 서버에게 보내지 않으려는 목적으로만 사용해야 한다.



** 서버와 100 Continue

- 서버가 100-continue 값이 담긴 Expect 헤더가 포함된 요청을 받는다면, 100 Continue 응답 혹은 에러 코드로 답해야 한다.

- 절대로 100-continue 응답을 받을 것을 의도하지 않은 클라이언트에게 100 Continue 상태 코드를 보내서는 안 된다.



** 프락시와 100 Continue

 - 클라이언트로부터 100-continue 응답을 의도한 요청을 받은 프락시는 몇 가지 해야할 일이 있다. 만약 다음 홉(next-hop) 서버가 HTTP/1.1을 따르거나 혹은 어떤 버전을 따르는지 모른다면 Expect 헤더를 포함시켜서 요청을 다음으로 전달해야 한다. 만약 다음 홉의 서버가 1.1보다 이전 버전의 HTTP를 따른다는 것을 알고 있다면, 프락시는 417 Expectation Failed 에러로 응답해야 한다.



* 200-299 : 성공 상태 코드



* 300-399 : 리다이렉션 상태 코드

- 클라이언트가 관심있어 하는 리소스에 대해 다른 위치를 사용하라고 말해주거나 그 리소스의 내용 대신 다른 대안 응답(리다이렉션 상태 코드와 Location 헤더)을 제공한다.

-  리다이렉션 상태 코드 중 몇몇은 리소스에 대한 애플리케이션의 로컬 복사본이 원래 서버와 비교했을 때 유효한지 확인하기 위해 사용된다.

- HEAD가 아닌 요청에 대해 리다이렉션 상태 코드를 포함한 응답을 할 때, 리다이렉트될 URL에 대한 링크와 설명을 포함시키는 것은 좋은 습관이다.



* 400-499 : 클라이언트 에러 상태 코드

- 존재하지 않는 URL에 대한 요청 등 클라이언트가 잘못 구성된 요청 메시지를 보낸 경우



* 500-599 : 서버 에러 상태 코드

- 클라이언트가 올바른 요청을 보냈음에도 서버 자체에서 에러가 발생하는 경우

- 클라이언트가 서버의 제한에 걸린 것일 수도 있고 혹은 게이트웨이 리소스와 같은 서버의 보조 구성요소에서 발생한 에러일 수도 있다.



6) 여러 HTTP 헤더들은 무슨 일을 하는가
* 일반 헤더(General Headers)

- 메시지에 대한 아주 기본적인 정보

- 클라이언트와 서버 양쪽 모두 사용



* 요청 헤더(Request Headers)

- 요청 메시지를 위한 헤더 (요청 메시지에서만 의미를 갖는다)

- 요청이 최초 발생한 곳에서 누가 혹은 무엇이 그 요청을 보냈는지에 대한 정보 및 클라이언트의 선호나 능력에 대한 정보(Accept 관련 헤더)를 준다.

- 서버는 요청 헤더가 준 클라이언트에 대한 그 정보를 클라이언트에게 더 나은 응답을 주기 위해 활용할 수 있다.



* 응답 헤더(Response Headers)

- 클라이언트에게 정보를 제공하기 위한 헤더

- 누가 응답을 보내고 있는지 혹은 응답자의 능력은 어떻게 되는지 알려주며, 더 나아가 응답에 대한 특별한 설명도 제공할 수 있다.

- 클라이언트가 응답을 잘 다루고 나중에 더 나은 요청을 할 수 있도록 도와준다.



* 엔터티 헤더(Entity Headers)

- 엔터티 본문에 대한 헤더

ex) Content-Type 헤더- 일반적으로 메시지의 수신자에게 자신이 다루고 있는 것이 무엇인지 말해준다.



* 확장 헤더(Extension Headers)

- 애플리케이션 개발자들에 의해 만들어졌지만 HTTP 명세에는 추가되지 않은 비표준 헤더



1) HTTP는 어떻게 TCP 커넥션을 사용하는가
* TCP 커넥션

- 전 세계 모든 HTTP 통신은 패킷 교환 네트워크 프로토콜들의 계층화된 집합인 TCP/IP를 통해 이루어진다.

- 세계 어디서든 클라이언트 애플리케이션은 서버 애플리케이션으로 TCP/IP 커넥션을 맺을 수 있다.

- 일단 커넥션이 맺어지면 클라이언트와 서버 컴퓨터 간에 주고받는 메시지들은 손실 혹은 손상되거나 순서가 바뀌지 않고 안전하게 전달된다.

- HTTP가 메시지를 전송하고자 할 경우, 현재 연결되어 있는 TCP 커넥션을 통해서 메시지 데이터의 내용을 순서대로 보낸다.



(1) 브라우저가 URL에서 호스트명을 추출한다.

(2) 브라우저가 이 호스트명에 대한 IP주소를 찾는다.

(3) 브라우저가 포트 번호를 얻는다.

(4) 브라우저가 해당 서버의 포트로 (웹 서버와) TCP 커넥션을 생성한다.

(5) 브라우저가 서버로 HTTP GET 요청 메시지를 보낸다.

(6) 브라우저가 서버에서 온 HTTP 응답 메시지를 읽는다.

(7) 브라우저가 커넥션을 끊는다.



① 신뢰할 수 있는 데이터 전송 통로인 TCP

- TCP는 HTTP에게 신뢰할만한 통신 방식을 제공한다.

- TCP 커넥션의 한쪽에 있는 바이트들은 (충돌 없이) 반대쪽으로 순서에 맞게 정확히 전달된다.



② TCP 스트림은 세그먼트로 나뉘어 IP 패킷을 통해 전송된다.

- TCP는 IP 패킷 (혹은 IP 데이터그램)이라고 불리는 작은 조각을 통해 데이터를 전송한다.

- TCP는 세그먼트라는 단위로 데이터 스트림을 잘게 나누고, 세그먼트를 IP 패킷이라고 불리는 봉투에 담아서 인터넷을 통해 (하나의 IP 주소에서 다른 IP 주소로) 데이터를 전달한다.

** IP 패킷

(1) IP 패킷 헤더 (보통 20바이트) : 발신지와 목적지 IP 주소, 크기, 기타 플래그

(2) TCP 세그먼트 헤더 (보통 20바이트) : TCP 포트 번호, TCP 제어 플래그, 데이터의 순서와 무결성을 검사하기 위해 사용되는 숫자 값

(3) TCP 데이터 조각 (0 혹은 그 이상의 바이트)

- 이 모든 것은 TCP/IP 소프트웨어에 의해 처리되며, 그 과정은 HTTP 프로그래머에게 보이지 않는다.



③ TCP 커넥션 유지하기

- 컴퓨터는 항상 TCP 커넥션을 여러 개 가지고 있다. TCP는 포트 번호를 통해서 이런 여러 개의 커넥션을 유지한다.

- IP 주소는 해당 컴퓨터에 연결되고, 포트 번호는 해당 애플리케이션으로 연결된다.

- TCP 커넥션은 <발신지 IP 주소, 발신지 포트, 수신지 IP 주소, 수신지 포트>로 식별한다. (이 네 가지 값으로 유일한 커넥션 생성)



④ TCP 소켓 프로그래밍

- 운영체제는 TCP 커넥션의 생성과 관련된 여러 기능을 제공한다.

- 소켓 API를 사용하면, TCP 종단(endpoint) 데이터 구조를 생성하고, 원격 서버의 TCP 종단에 그 종단 데이터 구조를 연결하여 데이터 스트림을 읽고 쓸 수 있다. (소켓 API는 HTTP 프로그래머에게 TCP와 IP의 세부 사항들을 숨긴다.)

- TCP API는 기본적인 네트워크 프로토콜의 핸드셰이킹, 그리고 TCP 데이터 스트림과 IP 패킷 간의 분할 및 재조립에 대한 모든 세부사항을 외부로부터 숨긴다.



클라이언트	서버

새로운 소켓을 만든다(socket)

80 포트로 소켓을 묶는다

소켓 커넥션을 허가한다(listen)

커넥션을 기다린다(accept)
IP 주소와 포트를 얻는다	
새로운 소켓을 생성한다(socket)	
서버의 IP:포트로 연결한다(connect)
→ 서버에 TCP 커넥션 생성
** 커넥션 생성은 서버와의 거리, 서버의 부하, 인터넷 혼잡도에 따라서 시간이 걸린다.	

애플리케이션 커넥션 통지
성공적으로 연결	
HTTP 요청을 보내고(write), HTTP 응답을 기다린다(read)	

요청을 읽기 시작한다(read)
그 요청 메시지를 다 받으면, 그 요청을 분석하여 처리한다.

HTTP 응답을 보낸다(write)
HTTP 응답을 처리한다	
커넥션을 닫는다(close)	커넥션을 닫는다(close)


2) TCP의 성능에 대한 고려 -  지연, 병목, 막힘
- HTTP는 TCP 바로 위에 있는 계층이기 때문에 HTTP 트랜잭션의 성능은 그 아래 계층인 TCP 성능에 영향을 받는다.



* HTTP 트랜잭션 지연

- 클라이언트나 서버가 너무 많은 데이터를 내려받거나 복잡하고 동적인 자원들을 실행하지 않는 한, 대부분의 HTTP 지연은 TCP 네트워크 지연 때문에 발생한다.



** HTTP 트랜잭션을 지연시키는 원인

(1) 클라이언트는 URI에서 웹 서버의 IP 주소와 포트 번호를 알아야 한다. 만약 URI에 기술되어 있는 호스트에 최근에 방문한 적이 없으면, DNS 인프라를 사용하여 URI에 있는 호스트 명을 IP 주소로 변환하는데 수십 초의 시간이 걸릴 것이다.

(2) 클라이언트는 TCP 커넥션 요청을 서버에게 보내고 서버가 커넥션 허가 응답을 회신하기를 기다린다. 커넥션 설정 시간은 새로운 TCP 커넥션에서 항상 발생한다. 보통 1~2초의 시간이 소요되지만, 수백 개의 HTTP 트랜잭션이 만들어지면 소요시간은 크게 증가할 것이다.

(3) 커넥션이 맺어지면 클라이언트는 HTTP 요청을 새로 생성된 TCP 파이프를 통해 전송한다. 웹 서버는 데이터가 도착하는 대로 TCP 커넥션에서 요청 메시지를 읽고 처리한다. 요청 메시지가 인터넷을 통해 전달되고 서버에 의해서 처리되는 데까지는 시간이 소요된다.

(4) 웹 서버가 HTTP 응답을 보내는 것 역시 시간이 소요된다.



- 이런 TCP 네트워크 지연은 하드웨어의 성능, 네트워크의 서버의 전송 속도, 요청과 응답 메시지의 크기, 클라이언트와 서버 간의 거리, TCP 프로토콜의 기술적인 복잡성에 따라 달라진다.



* 성능 관련 중요 요소

① TCP 커넥션의 핸드셰이크 설정

- TCP는 데이터를 전송하기 전에, 커넥션 설정을 위해 두 개의 패킷 전송(연속으로 IP 패킷 교환)을 해야 한다. 작은 크기의 데이터 전송에 커넥션이 사용된다면, 이런 패킷 교환은 HTTP 성능을 크게 저하시킬 수 있다.



** 핸드셰이크 순서

(1) 클라이언트는 새로운 TCP 커넥션을 생성하기 위해 'SYN(Synchronize sequence numbers)' 플래그를 갖는 작은 TCP 패킷을 서버에게 보낸다. 이 요청이 커넥션 생성 요청이라는 뜻이다. 

(2) 서버가 그 커넥션을 받으면 몇 가지 커넥션 매개변수를 산출하고, 커넥션 요청이 받아들여졌음을 의미하는 'SYN'과 'ACK(Acknowledgement)' 플래그를 포함한 TCP 패킷을 클라이언트에게 보낸다.

(3) 클라이언트는 커넥션이 잘 맺어졌음을 알리기 위해서 서버에게 다시 확인응답 신호를 보낸다. 오늘날의 TCP는 클라이언트가 이 확인응답 패킷과 함께 데이터를 보낼 수 있다.



- HTTP 트랜잭션이 아주 큰 데이터를 주고받지 않는 평범한 경우에는 SYN/SYN+ACK 핸드셰이크가 눈에 띄는 지연을 발생시킨다. 결국, 크기가 작은 HTTP 트랜잭션은 50% 이상의 시간을 TCP를 구성하는 데 쓴다. 



② TCP의 편승(piggyback) 확인응답(acknowledgement)을 위한 확인응답 지연 알고리즘

- 인터넷 자체가 패킷 전송을 완벽히 보장하지는 않기 때문에, TCP는 성공적인 데이터 전송을 보장하기 위해서 자체적인 확인 체계를 가진다.

- 각 TCP 세그먼트는 순번과 데이터 무결성 체크섬을 가진다. 각 세그먼트의 수신자는 세그먼트를 온전히 받으면 작은 확인응답 패킷을 송신자에게 반환한다. 만약 송신자가 특정 시간 안에 확인응답 메시지를 받지 못하면 패킷이 파기되었거나 오류가 있는 것으로 판단하고 데이터를 다시 전송한다.

- 확인응답은 그 크기가 작기 때문에, TCP가 같은 방향으로 송출되는 데이터 패킷에 확인응답을 '편승(piggyback)'시켜 네트워크를 좀 더 효율적으로 사용한다. 이처럼 확인응답이 같은 방향으로 가는 데이터 패킷에 편승되는 경우를 늘리기 위해서, 많은 TCP 스택은 '확인응답 지연' 알고리즘을 구현한다. 확인응답 지연은 송출할 확인응답을 특정 시간 동안 버퍼에 저장해 두고, 확인응답을 편승시키기 위한 송출 데이터 패킷을 찾는다. 만약 일정 시간 안에 송출 데이터 패킷을 찾지 못하면 확인응답은 별도 패킷을 만들어 전송된다.

- 안타깝게도 요청과 응답 두 가지 형식으로만 이루어지는 HTTP 동작 방식은 확인 응답이 송출 데이터 패킷에 편승할 기회를 감소시킨다. 막상 편승할 패킷을 찾으려고 하면 해당 방향으로 송출될 패킷이 많지 않기 때문에, 확인응답 지연 알고리즘으로 인한 지연이 자주 발생한다.



③ 인터넷의 혼잡을 제어하기 위한 TCP의 느린 시작(slow-start)

- TCP 커넥션은 시간이 지나면서 자체적으로 '튜닝'되어서, 처음에는 커넥션의 최대 속도를 제한하고 데이터가 성공적으로 전송됨에 따라서 속도 제한을 높여나간다. 이렇게 조율하는 것을 'TCP 느린 시작'이라고 부르며, 이는 급작스러운 부하와 혼잡을 방지하는 데 쓰인다.

- TCP 느린 시작은 TCP가 한 번에 전송할 수 있는 패킷의 수를 제한하고, 패킷이 성공적으로 전달되는 시점에 전송하는 패킷의 양을 늘릴 수 있다. 이를 '혼잡 윈도를 연다(open the congestion window)'라고 한다.

- 새로운 커넥션보다 이미 어느 정도 데이터를 주고받은 '튜닝'된 커넥션이 더 빠르기 때문에, HTTP에는 이미 존재하는 커넥션을 재사용하는 기능이 있다.



④ 데이터를 한데 모아 한 번에 전송하기 위한 네이글(nagle) 알고리즘

- 애플리케이션이 어떤 크기의 데이터든지(심지어 1바이트라도) TCP 스택으로 전송할 수 있도록, TCP는 데이터 스트림 인터페이스를 제공한다. 하지만 각 TCP 세그먼트는 40바이트 상당의 플래그와 헤더를 포함하여 전송하기 때문에, TCP가 작은 크기의 데이터를 포함한 많은 수의 패킷을 전송한다면 네트워크 성능은 크게 떨어진다.

- 네이글 알고리즘은 네트워크의 효율을 위해서, 패킷을 전송하기 전에 많은 양의 TCP 데이터를 한 개의 덩어리로 합친다. 세그먼트가 최대 크기가 되지 않으면 전송을 하지 않는다. (다른 모든 패킷이 확인응답을 받은 경우 제외)



** 네이글 알고리즘이 발생시키는 HTTP 성능 관련 문제

(1) 크기가 작은 HTTP 메시지는 패킷을 채우지 못하기 때문에, 앞으로 생길지 생기지 않을지 모르는 추가적인 데이터를 기다리며 지연될 것이다.

(2) 확인응답 지연과 함께 쓰일 경우 형편없이 동작한다. 네이글 알고리즘은 확인응답이 도착할 때까지 데이터 전송을 멈추고 있는 반면, 확인응답 지연 알고리즘은 확인응답을 100~200밀리초 지연시킨다.



⑤ TIME_WAIT의 누적과 포트 고갈

- TCP 커넥션의 종단에서 TCP 커넥션을 끊으면, 종단에서는 커넥션의 IP 주소와 포트 번호를 메모리의 작은 제어영역에 기록해 놓는다. 이 정보는 같은 주소와 포트 번호를 사용하는 새로운 TCP 커넥션이 일정 시간 동안에는 생성되지 않게 하기 위한 것으로, 이전 커넥션과 관련된 패킷이 그 커넥션과 같은 주소와 포트 번호를 가지는 새로운 커넥션에 삽입되는 문제를 방지한다. 만약 이전 커넥션의 패킷이 그 커넥션과 같은 연결 값으로 생성된 커넥션에 삽입되면, 패킷은 중복되고 TCP 데이터는 충돌할 것이다.

- 이러한 포트 고갈 문제로 인해 대기 상태로 있는 제어 블록이 너무 많아지는 상황을 주의해야 한다.



3) HTTP 커넥션 관리 - 병렬 커넥션, keep-alive 커넥션, 커넥션 파이프라인을 활용한 HTTP의 최적화
* HTTP 커넥션 헤더

- HTTP 메시지는 클라이언트에서 서버까지 프락시 서버, 캐시 서버 등과 같은 중개 서버들을 하나하나 거치면서 전달된다.

- 어떤 경우에는 두 개의 인접한 HTTP 애플리케이션이 현재 맺고 있는 커넥션에만 적용될 옵션을 지정해야 할 때가 있다.

- HTTP 커넥션 헤더 필드는 커넥션 토큰을 쉼표로 구분하여 가지고 있으며, 그 값들은 다른 커넥션에 전달되지 않는다.



** 커넥션 헤더에는 다음 세 가지 종류의 토큰이 전달될 수 있다.

(1) HTTP 헤더 필드 명은 이 커넥션에만 해당되는 헤더들을 나열한다. (다음 커넥션에 전달하면 안 된다. 즉 커넥션 헤더에 있는 모든 헤더 필드는 메시지를 다른 곳으로 전달하는 시점에 삭제되어야 한다. → 홉별 헤더 명 기술)

(2) 임시적인 토큰 값은 커넥션에 대한 비표준 옵션을 의미한다.

(3) close 값은 커넥션이 작업이 완료되면 종료되어야 함을 의미한다.



* HTTP 커넥션의 성능을 향상시킬 수 있는 최신 기술 4가지

- 순차적인 트랜잭션 처리에 의한 지연을 해결



① 병렬(parallel) 커넥션

- 여러 개의 TCP 커넥션을 통한 동시 HTTP 요청 → 여러 개의 HTTP 트랜잭션을 병렬로 처리



(1) 병렬 커넥션은 페이지를 더 빠르게 내려받는다

- 각 커넥션의 지연 시간을 겹치게 하면 총 지연 시간을 줄일 수 있고, 클라이언트의 인터넷 대역폭을 한 개의 커넥션이 다 써버리는 것이 아니라면 나머지 객체를 내려받는 데 남은 대역폭을 사용할 수 있다.

(2) 병렬 커넥션이 항상 더 빠르지는 않다.

- ex) 클라이언트의 네트워크 대역폭이 좁을 때

- 다수의 커넥션은 메모리를 많이 소모하고 자체적인 성능 문제를 발생시킨다.

(3) 병렬 커넥션은 화면에 여러 개의 객체가 동시에 내려받고 있는 상황을 볼 수 있기 때문에 더 빠르게 '느껴질 수' 있다.



** 병렬 커넥션의 단점

(1) 각 트랜잭션마다 새로운 커넥션을 맺고 끊기 때문에 시간과 대역폭이 소요된다.

(2) 각각의 새로운 커넥션은 TCP 느린 시작 때문에 성능이 떨어진다.

(3) 실제로 연결할 수 있는 병렬 커넥션의 수에는 제한이 있다.



② 지속(persistent) 커넥션

- 커넥션을 맺고 끊는 데서 발생하는 지연을 제거하기 위한 TCP 커넥션의 재활용

- 웹 클라이언트는 '사이트 지역성(site locality)'에 의해 일반적으로 같은 사이트에 여러 개의 커넥션을 맺는다. 따라서 HTTP/1.1을 지원하는 기기는 처리가 완료된 후에도 TCP 커넥션을 유지하여 앞으로 있을 HTTP 요청에 재사용할 수 있다. 처리가 완료된 후에도 계속 연결된 상태로 있는 TCP 커넥션을 지속 커넥션이라고 부른다.

- 비지속 커넥션은 각 처리가 끝날 때마다 커넥션을 끊지만, 지속 커넥션은 클라이언트나 서버가 커넥션을 끊기 전까지는 트랜잭션 간에도 커넥션을 유지한다.

- 해당 서버에 이미 맺어져 있는 지속 커넥션을 재사용함으로써 커넥션을 맺기 위한 준비작업에 따르는 시간을 절약할 수 있다. 게다가 이미 맺어져 있는 커넥션은 TCP의 느린 시작으로 인한 지연을 피함으로써 더 빠르게 데이터를 전송할 수 있다.



** 지속 커넥션의 장점

(1) 커넥션을 맺기 위한 사전 작업과 지연을 줄여준다.

(2) 튜닝된 커넥션을 유지한다.

(3) 커넥션의 수를 줄여준다.



- 하지만 지속 커넥션을 잘못 관리할 경우, 계속 연결된 상태로 있는 수많은 커넥션이 쌓이게 될 것이다. 이는 로컬의 리소스 그리고 원격의 클라이언트와 서버의 리소스에 불필요한 소모를 발생시킨다.

- 지속 커넥션은 병렬 커넥션과 함께 사용될 때에 가장 효과적이다. 오늘날 많은 웹 애플리케이션은 적은 수의 병렬 커넥션만을 맺고 그것을 유지한다.



** 두 가지 지속 커넥션 타입

(1) HTTP/1.0+의 Keep-Alive 커넥션

- HTTP/1.1 명세에서는 빠졌지만, 아직도 브라우저와 서버 간에 keep-alive 핸드셰이크가 널리 사용되고 있기 때문에, HTTP 애플리케이션은 그것을 처리할 수 있게 개발해야 한다.



ⓐ Keep-Alive 동작

- HTTP/1.0 keep-alive 커넥션을 구현한 클라이언트는 커넥션을 유지하기 위해서 요청에 Connection: Keep-Alive 헤더를 포함시킨다. 

- 이 요청을 받은 서버가 그 다음 요청도 이 커넥션을 통해 받고자 한다면, 응답 메시지에 같은 헤더를 포함시켜 응답한다.

- 응답에 Connection: Keep-Alive 헤더가 없으면, 클라이언트는 서버가 keep-alive를 지원하지 않으며 응답 메시지가 전송되고 나면 서버 커넥션을 끊을 것이라 추정한다.



ⓑ Keep-Alive 옵션

- Keep-Alive 헤더는 커넥션을 유지하기를 바라는 요청일 뿐이며, 무조건 그것을 따를 필요는 없다. 언제든지 현재의 keep-alive 커넥션을 끊을 수 있으며 keep-alive 커넥션에서 처리되는 트랜잭션의 수를 제한할 수도 있다.

- timeout, max



ⓒ 이 외 Keep-Alive 커넥션 제한과 규칙

- 커넥션이 끊어지기 전에 엔터티 본문의 길이를 알 수 있어야 커넥션을 유지할 수 있다. 즉 엔터티 본문이 정확한 Content-Length 값과 함께 멀티파트 미디어 형식을 가지거나 청크 전송 인코딩으로 인코드되어야 함을 뜻한다. 트랜잭션이 끝나는 시점에 기존 메시지의 끝과 새로운 메시지의 시작점을 정확히 알 수 있어야 하기 때문이다.

- 프락시와 게이트웨이는 Connection 헤더의 규칙을 철저히 지켜야 한다. 프락시와 게이트웨이는 메시지를 전달하거나 캐시에 넣기 전에 Connection 헤더에 명시된 모든 헤더 필드와 Connection 헤더를 제거해야 한다. (정석대로라면 keep-alive 커넥션은 Connection 헤더를 인식하지 못하는 (dumb) 프락시 서버와는 맺어지면 안 된다.)

왜? Connection 헤더는 홉별(hop-by-hop) 헤더다. 웹 서버와 클라이언트는 프락시로부터 Connection: Keep-Alive 헤더를 받으면, 자신과 프락시 간의 커넥션에 대한 것으로 오해한다. 즉 오직 한 개의 전송 링크에만 적용되며 다음 서버로 전달되어서는 안 된다. 

- 클라이언트는 응답 전체를 모두 받기 전에 커넥션이 끊어졌을 경우, 별다른 문제가 없으면 요청을 다시 보낼 수 있게 준비되어 있어야 한다.



(2) HTTP/1.1의 지속 커넥션

- HTTP/1.1에서는 keep-alive 커넥션을 지원하지 않는 대신, 목적은 같되 설계가 더 개선된 지속 커넥션을 지원한다.

- HTTP/1.0의 keep-alive 커넥션과는 달리 HTTP/1.1의 지속 커넥션은 기본으로 활성화되어 있다. 별도 설정을 하지 않는 한 모든 커넥션을 지속 커넥션으로 취급하고, HTTP/1.1 애플리케이션은 트랜잭션이 끝난 다음 커넥션을 끊으려면 Connection: close 헤더를 명시해야 한다. HTTP/1.1 클라이언트는 응답에 Connection: close 헤더가 없으면 응답 후에도 HTTP/1.1 커넥션을 계속 유지하자는 것으로 추정한다. 하지만 클라이언트와 서버는 언제든지 커넥션을 끊을 수 있다.



③ 파이프라인(pipelined) 커넥션

- 공유 TCP 커넥션을 통한 병렬 HTTP 요청

- HTTP/1.1은 지속 커넥션을 통해서 요청을 파이프라이닝할 수 있다. 여러 개의 요청은 응답이 도착하기 전까지 큐에 쌓인다. 이는 대기 시간이 긴 네트워크 상황에서 네트워크 상의 왕복으로 인한 시간을 줄여서 성능을 높여준다.



** 제약 사항

(1) HTTP 클라이언트는 커넥션이 지속 커넥션인지 확인하기 전까지는 파이프라인을 이어서는 안 된다.

(2) HTTP 메시지는 순번이 매겨져 있지 않으므로 HTTP 응답은 요청 순서와 같게 와야 한다.

(3) HTTP 클라이언트는 커넥션이 언제 끊어지더라도, 완료되지 않은 요청이 파이프라인에 있으면 언제든 다시 요청을 보낼 준비가 되어 있어야 한다.

(4) HTTP 클라이언트는 POST와 같은 비멱등 요청은 반복해서 보내면 안 된다.



④ 다중(multiplexed) 커넥션

- 요청과 응답들에 대한 중재



4) 커넥션 관리를 위해 따라야 할 규칙들
- 커넥션 관리(특히 언제 어떻게 커넥션을 끊는가)에는 명확한 기준이 없다.



* '마음대로' 커넥션 끊기

- 어떠한 HTTP 클라이언트, 서버, 혹은 프락시도 언제든지 TCP 전송 커넥션을 끊을 수 있다.



* Content-Length와 Truncation

- 각 HTTP 응답은 본문의 정확한 크기 값을 가지는 Content-Length 헤더를 가지고 있어야 한다.



* 커넥션 끊기의 허용, 재시도, 멱등성

- 커넥션은 에러가 없더라도 언제든 끊을 수 있다. HTTP 애플리케이션은 예상치 못하게 커넥션이 끊어졌을 때에 적절히 대응할 수 있는 준비가 되어 있어야 한다.

- 한 번 혹은 여러 번 실행됐는지에 상관없이 같은 결과를 반환한다면 그 트랜잭션은 멱등(idempotent)하다고 한다. GET, HEAD, PUT, DELETE, TRACE 그리고 OPTIONS 메서드들은 멱등하다고 이해하면 된다. 클라이언트는 POST와 같이 멱등이 아닌 요청은 파이프라인을 통해 요청하면 안 된다.



* 우아한 커넥션 끊기

① 전체 끊기와 절반 끊기

- close() : 전체 끊기 / TCP 커넥션의 입력 채널과 출력 채널의 커넥션을 모두 끊는다.

- shutdown() : 절반 끊기 / 입력 채널이나 출력 채널 중 하나를 개별적으로 끊는다.

② TCP 끊기와 리셋 에러

- 단순한 HTTP 애플리케이션은 전체 끊기만을 사용할 수 있다.

- 절반 끊기를 사용해야 하는 경우, 보통은 커넥션의 출력 채널을 끊는 것이 안전하다.

③ 우아하게 커넥션 끊기

- 일반적으로 애플리케이션이 우아한 커넥션 끊기를 구현하는 것은 애플리케이션 자신의 출력 채널을 먼저 끊고 다른 쪽에 있는 기기의 출력 채널이 끊기는 것을 기다리는 것이다. 양쪽에서 더는 데이터를 전송하지 않을 것이라고 알려주면 커넥션은 리셋의 위험 없이 온전히 종료된다.
