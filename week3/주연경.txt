<5장>

* 웹 서버
- (리소스에 대한) HTTP 요청을 처리하고 응답을 제공한다.

- 웹 서버 소프트웨어 혹은 웹페이지 제공에 특화된 장비를 일컫는다.



* 웹 서버 형태

① 다목적 소프트웨어 웹 서버

- 네트워크에 연결된 표준 컴퓨터 시스템에서 동작한다. (프로그램)

- 거의 모든 컴퓨터와 운영체제에서 동작한다.

- 아파치나 W3C의 직소 같은 오픈 소스 소프트웨어 혹은 마이크로소프트나 아이플래닛의 상용 소프트웨어

② 임베디드 웹 서버

- 일반 소비자용 제품에 내장될 목적으로 만들어진 작은 웹 서버

- 사용자가 그들의 일반 소비자용 기기를 간편한 웹 브라우저 인터페이스로 관리할 수 있게 해 준다.



* 웹 서버 구현

① HTTP 프로토콜 구현 : HTTP 및 그와 관련된 TCP 처리를 구현한 것이다.

- TCP 커넥션 관리에 대한 책임을 운영체제와 나눠 갖는다.

** 운영체제

- 컴퓨터 시스템의 하드웨어 관리

- TCP/IP 네트워크 지원

- 웹 리소스를 유지하기 위한 파일 시스템

- 현재 연산 활동을 제어하기 위한 프로세스 관리 제공

② 웹 리소스 관리 : 자신이 제공하는 리소스를 관리한다.

③ 웹 서버 관리 : 웹 서버를 설정, 통제, 확장하기 위한 관리 기능을 제공한다.

- HTTP/1.1의 기능들을 지원하려면 풍부한 리소스 지원, 가상 호스팅, 접근 제어, 로깅, 설정, 모니터링, 그 외 성능을 위한 각종 기능들이 필요하다.



* 진짜 웹 서버가 하는 일

① 커넥션을 맺는다 : 클라이언트의 접속을 받아들이거나, 원치 않는 클라이언트라면 닫는다.



(1) 새 커넥션 다루기

- 클라이언트가 웹 서버에 TCP 커넥션을 요청하면,

웹 서버는 그 커넥션을 맺고 TCP 커넥션에서 IP주소를 추출하여 커넥션 맞은편에 어떤 클라이언트가 있는지 확인한다.

- 일단 새 커넥션이 맺어지고 받아들여지면,

서버는 새 커넥션을 커넥션 목록에 추가하고 커넥션에서 오가는 데이터를 지켜보기 위한 준비를 한다.



(2) 호스트명 룩업(hostname lookup) : 클라이언트 호스트명 식별

- 대부분의 웹 서버는 '역방향 DNS(reverse DNS)'를 사용해서

클라이언트의 IP주소를 클라이언트의 호스트명으로 변환하도록 설정되어 있다.

- 웹 서버는 클라이언트 호스트명을 구체적인 접근 제어와 로깅을 위해 사용할 수 있다.



(3) ident를 통해 클라이언트 사용자 알아내기

- ident 프로토콜 : 서버에게 어떤 사용자 이름이 HTTP 커넥션을 초기화했는지 찾아낼 수 있게 해 준다.



② 요청을 받는다 : HTTP 요청 메시지를 네트워크로부터 읽어 들인다.



(1) 요청 메시지 파싱

- 커넥션에 데이터가 도착하면, 웹 서버는 네트워크 커넥션에서 그 데이터를 읽어 들이고 파싱하여 요청 메시지를 구성한다.

- 요청줄을 파싱하여 요청 메서드, 지정된 리소스의 식별자(URI), 버전 번호를 찾는다.

- 네트워크 커넥션은 언제라도 무효화될 수 있으므로, 메시지 일부분을 메모리에 임시로 저장해 둘 필요가 있다.



(2) 메시지의 내부 표현

- 요청 메시지를 쉽게 다룰 수 있도록 내부 자료 구조에 저장한다.



(3) 커넥션 입력/출력 처리 아키텍처

- 웹 서버 아키텍처의 차이에 따라 요청을 처리하는 방식도 달라진다.



ⓐ 단일 스레드 웹 서버

- 한 번에 하나씩 요청을 처리한다.

ⓑ 멀티프로세스와 멀티스레드 웹 서버

- 여러 요청을 동시에 처리하기 위해 여러 개의 프로세스 혹은 고효율 스레드를 할당한다.

- 몇몇 서버는 매 커넥션마다 스레드/프로세스 하나를 할당하지만, 이는 너무 많은 메모리나 시스템 리소스를 소비하므로 최대 개수에 제한을 건다.

ⓒ 다중 I/O 서버

- 대량의 커넥션을 지원 → 모든 커넥션은 동시에 그 활동을 감시당한다.

- 어떤 커넥션에 대해 작업을 수행하는 것은 그 커넥션에 실제로 해야 할 일이 있을 때뿐이다. 스레드와 프로세스는 유휴 상태의 커넥션에 매여 기다리느라 리소스를 낭비하지 않는다.

ⓓ 다중 멀티스레드 웹 서버

- 멀티스레딩 + 다중화



③ 요청을 처리한다 : 요청 메시지를 해석하고 행동을 취한다.

- 서버는 요청으로부터 메서드, 리소스, 헤더, 본문을 얻어내어 처리한다.



④ 리소스에 접근한다 : 메시지에서 지정한 리소스에 접근한다.

- 정적 콘텐츠 + 서버 위에서 동작하는 리소스 생성 애플리케이션을 통해 만들어진 동적 콘텐츠 제공



(1) Docroot

- 웹 서버는 여러 종류의 리소스 매핑을 지원한다.

- 기본적으로 요청 URI를 웹 서버의 파일 시스템 안에 있는 파일 이름으로 사용

- 웹 서버 파일 시스템의 특별한 폴더(문서 루트, docroot)를 웹 콘텐츠를 위해 예약해둔다.

ⓐ 가상 호스팅된 docroot

- 가상 호스팅 웹 서버는 각 사이트에 그들만의 분리된 문서 루트를 주는 방법으로, 한 웹 서버에서 여러 개의 웹 사이트를 호스팅한다.

- URI나 Host 헤더에서 얻은 IP주소나 호스트명을 이용해 올바른 문서 루트를 식별한다.

→ 이 방법으로 하나의 웹 서버 위에서 두 개의 사이트가 완전히 분리된 컨텐츠를 갖고 호스팅 되도록 할 수 있다.

ⓑ 사용자 홈 디렉터리 docroots



(2) 디렉터리 목록

- 클라이언트가 파일이 아닌 디렉터리 URL을 요청했을 경우

다음과 같은 행동을 취하도록 설정할 수 있다.

ⓐ 에러를 반환한다.

ⓑ 디렉터리 대신 특별한 '색인 파일'을 반환한다. (index.html / DirectoryIndex 설정)

ⓒ 디렉터리를 탐색해서 그 내용을 담은 HTML 페이지를 반환한다.



(3) 동적 콘텐츠 리소스 매핑

- 웹 서버는 URI를 동적 리소스(요청에 맞게 콘텐츠를 생성하는 프로그램)에 매핑할 수도 있다.

- 동적 리소스 요청을 받은 경우, 애플리케이션 서버는 그에 대한 동적 콘텐츠 생성 프로그램이 어디에 있는지, 그리고 어떻게 그 프로그램을 실행하는지 알려줄 수 있어야 한다.

- 오늘날의 애플리케이션 서버는, 마이크로소프트의 액티브 서버 페이지와 자바 서블릿과 같은 서버사이드 동적 콘텐츠 지원 기능을 가지고 있다.



(4) 서버사이드 인클루드(Servet-Side Includes, SSI)

- 서버는 콘텐츠에 변수 이름이나 내장된 스크립트가 될 수 있는 어떤 특별한 패턴이 있는지 검사를 받는다. 특별한 패턴은 변수 값이나 실행 가능한 스크립트의 출력 값으로 치환된다.



(5) 접근 제어

- 웹 서버는 각각의 리소스에 접근 제어를 할당할 수 있다.

- 접근 제어되는 리소스에 대한 요청이 도착했을 때, 웹 서버는 클라이언트의 IP주소에 근거하여 접근을 제어할 수 있고 혹은 리소스에 접근하기 위한 비밀번호를 물어볼 수도 있다.



⑤ 응답을 만든다 : 올바른 헤더를 포함한 HTTP 응답 메시지를 생성한다.

- 응답 메시지는 응답 상태 코드, 응답 헤더, 응답 본문을 포함한다.



(1) 응답 엔터티

- 응답 본문의 MIME 타입을 서술하는 Content-Type 헤더

- 응답 본문의 길이를 서술하는 Content-Length 헤더

- 실제 응답 본문의 내용



(2) MIME 타입 결정하기

- 웹 서버에는 응답 본문의 MIME 타입을 결정해야 하는 책임이 있다.

ⓐ mime.types

- 확장자 기반 타입 연계

ⓑ 매직 타이핑(Magic typing)

- 파일 내용 검사 후 매직 파일에 해당하는 패턴이 있는지 찾는다.

ⓒ 유형 명시

ⓓ 유형 협상



(3) 리다이렉션

- 웹 서버는 종종 성공 메시지 대신 리다이렉션 응답(상태코드 3XX)을 반환한다. 요청을 수행하기 위해 브라우저가 다른 곳으로 가도록 리다이렉트할 수 있다.  (Location 헤더)



⑥ 응답을 보낸다 : 응답을 클라이언트에게 돌려준다.



⑦ 트랜잭션을 로그로 남긴다 : 로그파일에 트랜잭션 완료에 대한 기록을 남긴다.


<6장>

* 웹 프락시 서버 (프락시)
- 클라이언트와 서버 사이에 위치하여 그들 사이의 HTTP 메시지를 정리하는 중개인처럼 동작한다.



1) 웹 중개자

- 웹 프락시 서버는 클라이언트의 입장에서 트랜잭션을 수행하는 중개인이다.

웹 프락시가 없다면, 클라이언트는 HTTP 서버와 직접 이야기한다.

웹 프락시가 있다면, 클라이언트는 HTTP 서버와 이야기하는 대신, 자신의 입장에서 서버와 대화해주는 프락시와 이야기한다.

- 트랜잭션을 완료하는 것이 클라이언트라는 점은 변하지 않지만, 프락시 서버가 제공하는 좋은 서비스를 이용하게 된다.



① 개인 프락시와 공유 프락시

- 개인 프락시 : 하나의 클라이언트만을 위한 프락시

- 공용 프락시 : 여러 클라이언트가 함께 사용



② 프락시 VS 게이트웨이

- 프락시 : 같은 프로토콜을 사용하는 둘 이상의 애플리케이션을 연결

- 게이트웨이 : 서로 다른 프로토콜을 사용하는 둘 이상을 연결

** 실질적으로 프락시와 게이트웨이의 차이점은 모호하다. 브라우저와 서버는 다른 버전의 HTTP를 구현하기 때문에, 프락시는 때때로 약간의 프로토콜 변환을 하기도 한다. 또한 상용 프락시 서버는 SSL 보안 프로토콜, SOCKS 방화벽, FTP 접근, 그리고 웹 기반 애플리케이션을 지원하기 위해 게이트웨이 기능을 구현한다.



2) 왜 프락시를 사용하는가?

- 보안 개선

- 성능 향상 및 비용 절약

- 모든 HTTP 트래픽을 들여다보고 건드릴 수 있기 때문에, 부가적인 가치를 주는 여러 유용한 웹 서비스를 구현하기 위해 트래픽을 감시하고 수정할 수 있다.



① 어린이 필터



② 문서 접근 제어자

- 많은 웹 서버들과 웹 리소스에 대한 단일한 접근 제어 전략을 구현하고 감사 추적을 하기 위해 사용될 수 있다.

- 중앙 프락시 서버에서 접근 제어 설정



③ 보안 방화벽

- 프락시 서버는 조직 안에 들어오거나 나가는 응용 레벨 프로토콜의 흐름을 네트워크의 한 지점에서 통제한다.

- 바이러스를 제거하는 웹이나 이메일 프락시가 사용할 수 있는, 트래픽을 세심히 살펴볼 수 있는 후크(hook)를 제공한다.



④ 웹 캐시

- 프락시 캐시는 인기 있는 문서의 로컬 사본을 관리하고 해당 문서에 대한 요청에 오면 빠르게 제공한다.



⑤ 대리 프락시 (= 리버스 프락시, 서버 가속기)

- 어떤 프락시들은 웹 서버인 것처럼 위장한다. 진짜 웹 서버 요청을 받지만 웹 서버와는 달리 요청받은 콘텐츠의 위치를 찾아내기 위해 다른 서버와 커뮤니케이션을 시작한다.

- 공용 콘텐츠에 대한 느린 웹 서버의 성능을 개선하기 위해 사용될 수 있다.

- 콘텐츠 라우팅 기능과 결합되어 주문형 복제 콘텐츠의 분산 네트워크를 만들기 위해 사용될 수 있다.



⑥ 콘텐츠 라우터

- 프락시 서버는 인터넷 트래픽 조건과 콘텐츠의 종류에 따라 요청을 특정 웹 서버로 유도하는 콘텐츠 라우터로 동작할 수 있다.

- 사용자들에게 제공할 여러 서비스를 구현하는데도 사용할 수 있다.

ex) 요청을 가까운 복제 캐시로 전달, 필터링 프락시 통과하도록 유도



⑦ 트랜스코더

- 프락시 서버는 콘텐츠를 클라이언트에게 전달하기 전에 본문 포맷을 수정할 수 있다.

- 트랜스코딩 : 데이터의 표현 방식을 자연스럽게 변환하는 것



⑧ 익명화 프락시

- HTTP 메시지에서 신원을 식별할 수 있는 특성들(ex. 클라이언트 IP주소, From 헤더, Referer 헤더, 쿠키, URI 세션 아이디)을 적극적으로 제거함으로써 개인 정보 보호와 익명성 보장에 기여한다.



3) 프락시는 어디에 있는가?



* 프락시 서버 배치

- 어떻게 사용할지에 따라서 프락시는 어디에든 배치할 수 있다.



① 출구 프락시

- 로컬 네트워크와 더 큰 인터넷 사이를 오가는 트래픽을 제어하기 위해 프락시를 로컬 네트워크의 출구에 박아 넣을 수 있다.



② 접근(입구) 프락시

- 고객으로부터의 모든 요청을 종합적으로 처리하기 위해 프락시는 ISP 접근 지점에 위치하기도 한다.

- ISP는 사용자들의 다운로드 속도를 개선하고 인터넷 대역폭 비용을 줄이기 위해 캐시 프락시를 사용해 많이 찾는 문서들의 사본을 저장한다.



③ 대리 프락시

- 네트워크의 가장 끝에 있는 웹 서버들의 바로 앞에 위치하여 웹 서버로 향하는 모든 요청을 처리하고 필요할 때만 웹 서버에게 자원을 요청할 수도 있다.

- 웹 서버에 보안 기능을 추가하거나 빠른 웹 서버 캐시를 느린 웹 서버의 앞에 놓음으로써 성능을 개선할 수도 있다.

- 대리 프락시는 일반적으로 웹 서버의 이름과 IP 주소로 스스로를 가장하기 때문에, 모든 요청은 서버가 아닌 이 프락시로 가게 된다.



④ 네트워크 교환 프락시

- 캐시를 이용해 인터넷 교차로의 혼잡을 완화하고 트래픽 흐름을 감시하기 위해

네트워크 사이의 인터넷 피어링 교환 지점들에 놓일 수 있다.



* 프락시 계층

- 프락시들은 연쇄적으로 구성될 수 있다.

- 프락시 계층에서, 메시지는 최종적으로 원 서버에 도착할 때까지 프락시와 프락시를 거쳐 이동한다. 그 후 다시 프락시들을 거쳐 클라이언트로 돌아온다.

- 부모(인바운드)-자식(아웃바운드) 관계



** 프락시 계층 콘텐츠 라우팅

- 프락시 서버는 여러 가지 판단 근거에 의해 메시지를 다양하고 유동적인 프락시 서버와 원 서버들의 집합에게 보낼 수 있다.

(1) 부하 균형

- 자식 프락시는 부하를 분산하기 위해 현재 부모들의 작업량 수준에 근거하여 부모 프락시를 고른다.

(2) 지리적 인접성에 근거한 라우팅

- 자식 프락시는 원 서버의 지역을 담당하는 부모를 선택할 수도 있다.

(3) 프로토콜/타입 라우팅

- URI에 근거하여 다른 부모나 원 서버로 라우팅 할 수 있다.

(4) 유료 서비스 가입자를 위한 라우팅

- 웹서비스 운영자가 빠른 서비스를 위해 추가금을 지불했다면, 그들의 URI는 대형 캐시나 성능 개선을 위한 압축 엔진으로 라우팅 될 수 있다.



* 어떻게 프락시가 트래픽을 처리하는가 (클라이언트 트래픽이 프락시로 가도록 만드는 방법)



① 클라이언트를 수정한다

- 많은 웹 클라이언트들은 수동 혹은 자동 프락시 설정을 지원한다. 만약 클라이언트가 프락시를 사용하도록 설정되어 있다면, 클라이언트는 HTTP 요청을 바로 그리고 의도적으로 원 서버가 아닌 프락시로 보낸다.



** 클라이언트 프락시 설정

- 많은 브라우저가 프락시를 설정하는 여러 가지 방법을 제공한다.



(1) 수동 설정

- 프락시를 사용하겠다고 명시적으로 선언한다.

- 단순하지만 유연하지 못하다. 모든 콘텐츠를 위해 단 하나의 프락시 서버만을 지정할 수 있고, 장애 시의 대체 작동에 대한 지원도 없다. 또한 설정된 브라우저가 매우 많다면, 그 모두를 원하는 대로 설정 변경을 하는 것은 어렵거나 불가능하다. (관리 문제 야기)



(2) 브라우저 기본 설정

- 브라우저 벤더나 배포자는 브라우저를 소비자에게 전달하기 전에 프락시를 미리 설정해 놓을 수 있다.



(3) 프락시 자동 설정(Proxy auto-configuration, PAC)

- 프락시 자동 설정(PAC) 파일 : 프락시 설정을 그때그때 상황에 맞게 계산해주는 작은 자바스크립트 프로그램

- PAC 파일을 사용하려면, 파일의 URI를 브라우저에 설정해야 한다. 브라우저는 URI로부터 PAC 파일을 가져와서 매 접근마다 적절한 프락시 서버를 계산하기 위해 자바스크립트 로직을 이용할 것이다.



(4) WPAD 프락시 발견

- 대부분의 브라우저는 자동설정 파일을 다운받을 수 있는 '설정 서버'를 자동으로 찾아주는, 웹 프락시 자동발견 프로토콜(Web Proxy Autodiscovery Protocol, WPAD)을 제공한다. 즉 브라우저는 PAC URI를 찾기 위해 WPAD를 사용한다.



② 네트워크를 수정한다

- 클라이언트는 알지도 못하고 간섭도 할 수 없는 상태에서, 네트워크 인프라를 가로채서 웹 트래픽을 프락시(인터셉트 프락시)로 가도록 조정한다.

- 이는 클라이언트 모르게 트래픽을 프락시로 보내는 스위칭 장치와 라우팅 장치를 필요로 한다.



③ DNS 이름공간을 수정한다

- 웹 서버 앞에 위치하는 프락시 서버인 대리 프락시는 웹 서버의 이름과 IP주소를 자신이 직접 사용한다. 그래서 모든 요청은 서버 대신 대리 프락시로 간다.

- 이는 DNS 이름 테이블을 수동으로 편집하거나 사용할 적절한 프락시나 서버를 계산해주는 특별한 동적 DNS 서버를 이용해서 조정될 수 있다.



④ 웹 서버를 수정한다

- 몇몇 웹 서버는 HTTP 리다이렉션 명령을 클라이언트에게 돌려줌으로써 클라이언트의 요청을 프락시로 리다이렉트하도록 설정할 수 있다. 리다이렉트를 받는 즉시 클라이언트는 프락시와의 트랜잭션을 시작한다.



4) 프락시 요청의 미묘한 특징들



① 프락시 URI는 서버 URI와 다르다

- 클라이언트 → 웹 서버 : 스킴, 호스트, 포트번호가 없는 부분 URI

- 클라이언트 → 프락시 : 완전한 URI

- cf) 가상 호스팅에서 일어나는 같은 문제 : 가상으로 호스팅되는 웹 서버는 호스트와 포트에 대한 정보가 담겨있는 Host 헤더를 요구한다.



② 인터셉트 프락시는 부분 URI를 받는다

- 원 서버를 대신하는 대리 프락시나 (클라이언트에게 보이지 않는 / 클라이언트 → 서버 트래픽을 가로채는) 인터셉트 프락시의 경우, 클라이언트는 자신이 웹 서버와 대화하고 있다고 생각하고 완전한 URI를 보내지 않을 것이다.



③ 프락시는 프락시 요청과 서버 요청을 모두 다룰 수 있다.

- 트래픽이 프락시 서버로 리다이렉트될 수 있는 여러 가지 방법이 존재하기 때문에, 다목적 프락시 서버는 요청 메시지의 완전한 URI와 부분 URI를 모두 지원해야 한다.

- 프락시는 명시적인 프락시 요청에 대해서는 완전한 URI를 사용하고 아니면 부분 URI를 사용해야 하며, 웹 서버 요청의 경우에는 가상 Host 헤더를 사용해야 한다.



④ 전송 중 URI 변경

- 사소한 URI 변경이라도 다운스트림 서버와 상호운용성 문제를 일으킬 수 있으므로 매우 신경을 써야 한다.



⑤ 프락시 유무에 따른 URI 분석

- 브라우저는 프락시의 존재 여부에 따라 요청 URI를 다르게 분석한다.

(1) 브라우저는 명시적인 프락시가 존재하지 않는 경우 부분 호스트명을 자동으로 확장한다.

(2) 명시적인 프락시가 있는 경우 부분 호스트명을 자동 확장하지 않는다. 브라우저의 URI가 프락시를 그냥 지나쳐버리기 때문이다.

프락시가 명시적으로 설정되면 브라우저는 DNS를 사용해 프락시 서버를 찾고, DNS 서버로부터 프락시 서버 IP 주소를 얻는다. (브라우저는 프락시에 접속하고자 시도한다.)

(3) 인터셉트 프락시를 이용한 URI 분석

- 클라이언트 입장에서 프락시는 존재하지 않는 것

- 인터셉터 프락시를 사용하고 있는 브라우저는 죽은 서버의 IP주소를 탐지할 수 없다.



5) 메시지 추적

- 프락시가 점점 더 흔해지면서, 프락시를 넘나드는 메시지의 흐름을 추적하고 문제점을 찾아내는 것도 필요한 일이 되었다.



① Via 헤더

- 메시지의 전달을 추적하고, 메시지 루프를 진단하고, 요청을 보내고 그에 대한 응답을 돌려주는 과정에 관여하는 모든 메시지 발송자들의 프로토콜을 다루는 능력을 알아보기 위해 사용된다.

- 프락시는 또한 네트워크의 라우팅 루프를 탐지하기 위해서도 Via 헤더를 사용할 수 있다.

- 몇몇 프락시는 서버에게 비 HTTP 프로토콜을 사용할 수 있는 게이트웨이 기능을 제공한다. Via 헤더는 이러한 프로토콜 변환을 기록하므로 HTTP 애플리케이션은 프락시 연쇄에서 프로토콜 능력과 변환이 있었는지를 알아챌 수 있다.



② TRACE 메서드

- 프락시 서버는 메시지가 전달될 때 메시지를 바꿀 수 있다. → 상호운용성 문제 증가

- 프락시 네트워크를 쉽게 진단하기 위해, 우리는 HTTP 프락시 네트워크를 통해 홉에서 홉으로 전달될 때마다 메시지의 내용이 어떻게 변하는지 편리하게 관찰할 방법이 필요하다.

- HTTP/1.1의 TRACE 메서드는 요청 메시지를 프락시의 연쇄를 따라가면서 어떤 프락시를 지나가고 어떻게 각 프락시가 요청 메시지를 수정하는지 관찰/추적할 수 있도록 해준다. 즉 TRACE는 프락시 흐름을 디버깅하는데 매우 유용하다.



6) 프락시 인증

- 프락시는 접근 제어 장치로서 제공될 수 있다. HTTP는 사용자가 유효한 접근 권한 자격을 프락시에 제출하지 않는 한 콘텐츠에 대한 요청을 차단하는 프락시 인증이라는 메커니즘을 정의하고 있다.
